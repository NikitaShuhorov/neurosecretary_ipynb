import os
import warnings
import os
import logging
import warnings
import asyncio
from dataclasses import dataclass
from getpass import getpass

import openai
import whisper
import yt_dlp
import noisereduce as nr
import soundfile as sf
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from pydub import AudioSegment


# –ü–æ–¥–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
os.environ['PYDEVD_DISABLE_FILE_VALIDATION'] = '1'
os.environ['KMP_DUPLICATE_LIB_OK'] = 'True'
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=FutureWarning)

"""# ## –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
@dataclass
class Config:
    TELEGRAM_TOKEN: str
    OPENAI_API_KEY: str
    WHISPER_MODEL: str = "base"
    GPT_MODEL: str = "gpt-4-turbo"
    AUDIO_CACHE: str = "audio_cache"
    MAX_FILE_SIZE_MB: int = 50
    TEMP_ANALYSIS: float = 0.2
    TEMP_PROTOCOL: float = 0.5
    SUPPORTED_FORMATS: tuple = ('wav', 'mp3', 'ogg', 'flac')

    def __post_init__(self):
        os.makedirs(self.AUDIO_CACHE, exist_ok=True)

"""# ## –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º

"""

# –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
class AudioProcessor:
    def __init__(self, config: Config):
        self.config = config
        self.logger = logging.getLogger("AudioProcessor")

    async def process_input(self, update: Update, input_source: str) -> tuple:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–≤–æ–¥–∞: –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–∑ Telegram –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube,
        —Å–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –≤ WAV (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (–ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É, —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞).
        """
        if update.message.audio:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ
                tg_file = await update.message.audio.get_file()
                file_path = os.path.join(self.config.AUDIO_CACHE, f"{tg_file.file_id}.mp3")
                await tg_file.download_to_drive(custom_path=file_path)
                source_type = "telegram"
                self.logger.info("–ê—É–¥–∏–æ—Ñ–∞–π–ª –∏–∑ Telegram —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∏–∑ Telegram.")
        elif update.message.text:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ YouTube
            if "youtube.com" in input_source or "youtu.be" in input_source:
                source_type = "youtube"
                file_path = await self.download_youtube_audio(input_source)
            else:
                raise Exception("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube.")
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–≤–æ–¥–∞.")

        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –≤ WAV, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        if not file_path.lower().endswith('.wav'):
            wav_path = await self._convert_to_wav(file_path)
            try:
                os.remove(file_path)
            except Exception:
                pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            file_path = wav_path

        return file_path, source_type

    async def _convert_to_wav(self, input_path: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç WAV —Å –ø–æ–º–æ—â—å—é pydub"""
        try:
            output_path = os.path.splitext(input_path)[0] + ".wav"
            audio = AudioSegment.from_file(input_path)
            audio.export(output_path, format="wav")
            self.logger.info("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return output_path
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ –≤ WAV —Ñ–æ—Ä–º–∞—Ç.")

    async def download_youtube_audio(self, url: str) -> str:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å YouTube —Å –ø–æ–º–æ—â—å—é yt_dlp"""
        try:
            ydl_opts = {
                'format': 'bestaudio/best',
                'outtmpl': os.path.join(self.config.AUDIO_CACHE, '%(id)s.%(ext)s'),
                'quiet': True,
                'no_warnings': True,
            }
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
                file_path = ydl.prepare_filename(info)
            self.logger.info("–ê—É–¥–∏–æ —Å YouTube —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
            return file_path
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ —Å YouTube: {e}")
            raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ —Å YouTube.")

"""# ## –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""

class MeetingProcessor:
    def __init__(self, config: Config):
        self.config = config
        self.whisper_model = whisper.load_model(config.WHISPER_MODEL)
        openai.api_key = config.OPENAI_API_KEY
        self.logger = logging.getLogger("MeetingProcessor")

    async def process_meeting(self, audio_path: str) -> str:
        """
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ Whisper –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏ —Å –ø–æ–º–æ—â—å—é GPT.
        """
        try:
            self.logger.info("–ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ...")
            result = self.whisper_model.transcribe(audio_path)
            transcription = result.get("text", "")
            self.logger.info("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

            protocol = self.generate_protocol(transcription)
            return protocol
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∏: {e}")
            raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")

    def generate_protocol(self, transcription: str) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ OpenAI GPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å–æ–≤–µ—â–∞–Ω–∏—è.
        """
        try:
            prompt = f"–°–æ–∑–¥–∞–π –ø—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–≤–µ—â–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:\n\n{transcription}"
            response = openai.ChatCompletion.create(
                model=self.config.GPT_MODEL,
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–æ–≤–µ—â–∞–Ω–∏–π."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.5,
            )
            protocol = response.choices[0].message.content.strip()
            return protocol
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
            raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞.")

"""# ## Telegram Bot"""

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram-–±–æ—Ç–∞
class NeuroSecretaryBot:
    def __init__(self, config: Config):
        self.config = config
        self.audio_processor = AudioProcessor(config)
        self.meeting_processor = MeetingProcessor(config)
        self.app = Application.builder().token(config.TELEGRAM_TOKEN).build()

        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(MessageHandler(filters.AUDIO | filters.TEXT, self.handle_input))

        logging.basicConfig(
            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            level=logging.INFO
        )
        self.logger = logging.getLogger("Bot")

    async def start(self, update: Update, context):
        await update.message.reply_text(
            "ü§ñ –ù–µ–π—Ä–æ-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3/WAV/OOG) –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ"
        )

    async def handle_input(self, update: Update, context):
        message = await update.message.reply_text("üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–≤–æ–¥–∞
            if update.message.audio:
                input_source = update.message.audio.file_id
            elif update.message.text:
                input_source = update.message.text
            else:
                await message.edit_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç")
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ/—Å—Å—ã–ª–∫–∏
            await message.edit_text("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            audio_path, source_type = await self.audio_processor.process_input(update, input_source)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤—Å—Ç—Ä–µ—á–∏
            await message.edit_text("üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...")
            protocol = await self.meeting_processor.process_meeting(audio_path)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            prefix = "üé• YouTube: " if source_type == "youtube" else "‚úÖ –ì–æ—Ç–æ–≤–æ:"
            await message.edit_text(f"{prefix}\n\n{protocol}")

            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists(audio_path):
                os.remove(audio_path)

        except Exception as e:
            await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            self.logger.error(f"Main Error: {str(e)}")

    def run(self):
        self.logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        self.app.run_polling()

"""# ## –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == "__main__":
    try:
        # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ Jupyter –ø—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio
        import nest_asyncio
        nest_asyncio.apply()

        print("üîë –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        config = Config(
            TELEGRAM_TOKEN=getpass("Telegram Token (@BotFather): "),
            OPENAI_API_KEY=getpass("OpenAI API Key (https://platform.openai.com): ")
        )

        bot = NeuroSecretaryBot(config)
        bot.run()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")